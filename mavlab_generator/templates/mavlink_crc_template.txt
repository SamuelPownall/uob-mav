classdef mavlink_crc < mavlink_handle
%%MAVLINK CRC Class
%%Handles the crc x.25 checksum system used by MAVLINK
    
    properties(Constant) 
        MAVLINK_MESSAGE_CRCS = uint8([#{crc<#>${value}$,}#0]);
        CRC_INIT_VALUE = uint16(hex2dec('ffff'));
    end
    
    properties
        crcValue;
    end
    
    methods
        
        %%Constructor: mavlink_crc
        function obj = mavlink_crc()
            obj.startChecksum();
        end
        
        function updateChecksum(obj, char)
            if char == uint8(char)
                char = uint8(char);
                crcBytes = typecast(uint16(obj.crcValue),'uint8');
                temp = bitxor(char,crcBytes(1));
                temp = bitxor(temp,bitshift(temp,4));
                crcAccum = bitxor(uint16(crcBytes(2)),bitshift(uint16(temp),8));
                crcAccum = bitxor(crcAccum,bitshift(uint16(temp),3));
                crcAccum = bitxor(crcAccum,bitshift(uint16(temp),-4));
                obj.crcValue = crcAccum;
            else
                fprintf(2,'MAVLAB-ERROR | mavlink_crc.updateChecksum()\\n\\t Input "char" is not of type "uint8"\\n');
            end
        end
        
        %%Function: Initialises the checksum value
        function startChecksum(obj)
            obj.crcValue = obj.CRC_INIT_VALUE;
        end
        
        %%Function: Hash the checksum with the mavlink message CRC
        function finishChecksum(obj, msgid)
           obj.updateChecksum(obj.MAVLINK_MESSAGE_CRCS(msgid + 1)) 
        end
        
        %%Getter: MSB
        function msb = getMSB(obj)
            crcBytes = typecast(uint16(obj.crcValue),'uint8');
            msb = crcBytes(2);
        end
        
        %%Getter: LSB
        function lsb = getLSB(obj)
            crcBytes = typecast(uint16(obj.crcValue),'uint8');
            lsb = crcBytes(1);
        end
        
    end
    
end