classdef msg_radio_status < MAVLinkMessage
	%MSG_RADIO_STATUS: MAVLink Message ID = 109
    %Description:
    %    Status generated by radio and injected into MAVLink stream.
    %    Can also be constructed by using a MAVLinkPacket as the only argument
	%Arguments:
    %    rxerrors(MAVLinkPacket): Alternative way to construct a message using a MAVLinkPacket
    %    rxerrors(uint16): Receive errors
    %    fixed(uint16): Count of error corrected packets
    %    rssi(uint8): Local signal strength
    %    remrssi(uint8): Remote signal strength
    %    txbuf(uint8): Remaining free buffer space in percent.
    %    noise(uint8): Background noise level
    %    remnoise(uint8): Remote background noise level
	
	properties(Constant)
		ID = 109
		LEN = 9
	end
	
	properties
        rxerrors	%Receive errors	|	(uint16)
        fixed	%Count of error corrected packets	|	(uint16)
        rssi	%Local signal strength	|	(uint8)
        remrssi	%Remote signal strength	|	(uint8)
        txbuf	%Remaining free buffer space in percent.	|	(uint8)
        noise	%Background noise level	|	(uint8)
        remnoise	%Remote background noise level	|	(uint8)
    end

    methods(Static)

        function send(out,rxerrors,fixed,rssi,remrssi,txbuf,noise,remnoise,varargin)

            if nargin == 7 + 1
                msg = msg_radio_status(rxerrors,fixed,rssi,remrssi,txbuf,noise,remnoise,varargin);
            elseif nargin == 2
                msg = msg_radio_status(rxerrors);
            else
                MAVLink.throwCustomError('The number of function arguments is not valid');
                return;
            end

            packet = msg.pack();
            if ~isempty(packet)
                buffer = packet.encode();
                write(out,buffer);
            else
                MAVLink.throwCustomError('The packet could not be verified');
            end
        
        end

    end

    methods

        function obj = msg_radio_status(rxerrors,fixed,rssi,remrssi,txbuf,noise,remnoise,varargin)
        %MSG_RADIO_STATUS: Create a new radio_status message object
        
            obj.msgid = obj.ID;
            obj.sysid = MAVLink.SYSID;
            obj.compid = MAVLink.COMPID;

            if nargin == 1 
                if isa(rxerrors,'MAVLinkPacket')
                    packet = rxerrors;
                    obj.sysid = packet.sysid;
                    obj.compid = packet.compid;
                    obj.unpack(packet.payload);
                else
                    MAVLink.throwTypeError('rxerrors','MAVLinkPacket');
                end
            elseif nargin >= 7 && isempty(varargin{1})
                obj.rxerrors = rxerrors;
                obj.fixed = fixed;
                obj.rssi = rssi;
                obj.remrssi = remrssi;
                obj.txbuf = txbuf;
                obj.noise = noise;
                obj.remnoise = remnoise;
            elseif nargin ~= 0
                MAVLink.throwCustomError('The number of constructer arguments is not valid');
            end

        end

        function packet = pack(obj)
        %PACK: Packs this MAVLink message into a MAVLinkPacket
        %Description:
        %    Packs the fields of a message into a MAVLinkPacket which can be encoded
        %    for transmission.

            errorField = obj.verify();
            if errorField == 0

                packet = MAVLinkPacket(msg_radio_status.LEN);
                packet.sysid = MAVLink.SYSID;
                packet.compid = MAVLink.COMPID;
                packet.msgid = msg_radio_status.ID;
                
                packet.payload.putUINT16(obj.rxerrors);
                packet.payload.putUINT16(obj.fixed);
                packet.payload.putUINT8(obj.rssi);
                packet.payload.putUINT8(obj.remrssi);
                packet.payload.putUINT8(obj.txbuf);
                packet.payload.putUINT8(obj.noise);
                packet.payload.putUINT8(obj.remnoise);

            else
                packet = [];
                MAVLink.throwPackingError(errorField);
            end

        end

        function unpack(obj, payload)
        %UNPACK: Unpacks a MAVLinkPayload into this MAVLink message
        %Description:
        %    Extracts the data from a MAVLinkPayload and attempts to store it in the fields
        %    of this message.
        %Arguments:
        %    payload(MAVLinkPayload): The payload to be unpacked into this MAVLink message

            payload.resetIndex();
            
            obj.rxerrors = payload.getUINT16();
            obj.fixed = payload.getUINT16();
            obj.rssi = payload.getUINT8();
            obj.remrssi = payload.getUINT8();
            obj.txbuf = payload.getUINT8();
            obj.noise = payload.getUINT8();
            obj.remnoise = payload.getUINT8();

        end
        
        function result = verify(obj)
        %VERIFY: Determine whether all fields of this message are full
        %Description:
        %    Finds the first empty field in this message and returns its name. If there are no
        %    empty fields return 0.

            if 1==0
            elseif size(obj.rxerrors,2) ~= 1
                result = 'rxerrors';
            elseif size(obj.fixed,2) ~= 1
                result = 'fixed';
            elseif size(obj.rssi,2) ~= 1
                result = 'rssi';
            elseif size(obj.remrssi,2) ~= 1
                result = 'remrssi';
            elseif size(obj.txbuf,2) ~= 1
                result = 'txbuf';
            elseif size(obj.noise,2) ~= 1
                result = 'noise';
            elseif size(obj.remnoise,2) ~= 1
                result = 'remnoise';

            else
                result = 0;
            end
        end

        function set.rxerrors(obj,value)
            if value == uint16(value)
                obj.rxerrors = uint16(value);
            else
                MAVLink.throwTypeError('value','uint16');
            end
        end
        
        function set.fixed(obj,value)
            if value == uint16(value)
                obj.fixed = uint16(value);
            else
                MAVLink.throwTypeError('value','uint16');
            end
        end
        
        function set.rssi(obj,value)
            if value == uint8(value)
                obj.rssi = uint8(value);
            else
                MAVLink.throwTypeError('value','uint8');
            end
        end
        
        function set.remrssi(obj,value)
            if value == uint8(value)
                obj.remrssi = uint8(value);
            else
                MAVLink.throwTypeError('value','uint8');
            end
        end
        
        function set.txbuf(obj,value)
            if value == uint8(value)
                obj.txbuf = uint8(value);
            else
                MAVLink.throwTypeError('value','uint8');
            end
        end
        
        function set.noise(obj,value)
            if value == uint8(value)
                obj.noise = uint8(value);
            else
                MAVLink.throwTypeError('value','uint8');
            end
        end
        
        function set.remnoise(obj,value)
            if value == uint8(value)
                obj.remnoise = uint8(value);
            else
                MAVLink.throwTypeError('value','uint8');
            end
        end
        
    end

end