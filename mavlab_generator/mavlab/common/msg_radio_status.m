classdef msg_radio_status < mavlink_message
    %MAVLINK Message Class
    %Name: radio_status	ID: 109
    %Description: Status generated by radio and injected into MAVLink stream.
            
    properties(Constant)
        ID = 109
        LEN = 9
    end
    
    properties        
		rxerrors	%Receive errors (uint16[1])
		fixed	%Count of error corrected packets (uint16[1])
		rssi	%Local signal strength (uint8[1])
		remrssi	%Remote signal strength (uint8[1])
		txbuf	%Remaining free buffer space in percent. (uint8[1])
		noise	%Background noise level (uint8[1])
		remnoise	%Remote background noise level (uint8[1])
	end

    
    methods
        
        %Constructor: msg_radio_status
        %packet should be a fully constructed MAVLINK packet
        function obj = msg_radio_status(packet)
        
            obj.msgid = obj.ID;
            if nargin == 1
                obj.sysid = packet.sysid;
                obj.compid = packet.compid;
                obj.unpack(packet.payload)
            end
            
        end
                        
        %Function: Packs this MAVLINK message into a packet for transmission
        function packet = pack(obj)
        
            packet = mavlink_packet(msg_radio_status.LEN);
            packet.sysid = mavlink.SYSID;
            packet.compid = mavlink.COMPID;
            packet.msgid = msg_radio_status.ID;
                
			packet.payload.putUINT16(obj.rxerrors);

			packet.payload.putUINT16(obj.fixed);

			packet.payload.putUINT8(obj.rssi);

			packet.payload.putUINT8(obj.remrssi);

			packet.payload.putUINT8(obj.txbuf);

			packet.payload.putUINT8(obj.noise);

			packet.payload.putUINT8(obj.remnoise);

		end
        
        %%Function: Unpacks a MAVLINK payload and stores the data in this message
        function unpack(obj, payload)
        
            payload.resetIndex();
        
			obj.rxerrors = payload.getUINT16();

			obj.fixed = payload.getUINT16();

			obj.rssi = payload.getUINT8();

			obj.remrssi = payload.getUINT8();

			obj.txbuf = payload.getUINT8();

			obj.noise = payload.getUINT8();

			obj.remnoise = payload.getUINT8();

		end
            
        function set.rxerrors(obj,value)
            if value == uint16(value)
                obj.rxerrors = uint16(value);
            else
                fprintf(2,'MAVLAB-ERROR | radio_status.set.rxerrors()\n\t Input "value" is not of type "uint16"\n');
            end
        end
                                    
        function set.fixed(obj,value)
            if value == uint16(value)
                obj.fixed = uint16(value);
            else
                fprintf(2,'MAVLAB-ERROR | radio_status.set.fixed()\n\t Input "value" is not of type "uint16"\n');
            end
        end
                                    
        function set.rssi(obj,value)
            if value == uint8(value)
                obj.rssi = uint8(value);
            else
                fprintf(2,'MAVLAB-ERROR | radio_status.set.rssi()\n\t Input "value" is not of type "uint8"\n');
            end
        end
                                    
        function set.remrssi(obj,value)
            if value == uint8(value)
                obj.remrssi = uint8(value);
            else
                fprintf(2,'MAVLAB-ERROR | radio_status.set.remrssi()\n\t Input "value" is not of type "uint8"\n');
            end
        end
                                    
        function set.txbuf(obj,value)
            if value == uint8(value)
                obj.txbuf = uint8(value);
            else
                fprintf(2,'MAVLAB-ERROR | radio_status.set.txbuf()\n\t Input "value" is not of type "uint8"\n');
            end
        end
                                    
        function set.noise(obj,value)
            if value == uint8(value)
                obj.noise = uint8(value);
            else
                fprintf(2,'MAVLAB-ERROR | radio_status.set.noise()\n\t Input "value" is not of type "uint8"\n');
            end
        end
                                    
        function set.remnoise(obj,value)
            if value == uint8(value)
                obj.remnoise = uint8(value);
            else
                fprintf(2,'MAVLAB-ERROR | radio_status.set.remnoise()\n\t Input "value" is not of type "uint8"\n');
            end
        end
                        
	end
end